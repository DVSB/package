"use strict";var Downpress=function(){var a=this;require("../library/_Boilerplate").call(this),this.packageJsonParsing(),this.on("package-parsed",function(){a.parseSecondConsoleArgument()})};require("util").inherits(Downpress,require("../library/_Boilerplate")),Downpress.prototype.parseSecondConsoleArgument=function(){var a=process.argv[2];switch(a){case"report":this.initReport();break;case"help":this.initHelp();break;case"run":this.initRun();break;case"init":this.initInit();break;default:this.initWithoutArgument()}},Downpress.prototype.initReport=function(){console.log(""),this.log("report a bug?"),this.log("  1: browse website github.com/downpress/package/issues"),this.log("  2: copy below infos about your computer and go ahead!"),console.log(""),this.log("versions:"),this.log("  node: "+process.versions.node),this.log("  http_parser: "+process.versions.http_parser),this.log("  v8: "+process.versions.v8),this.log("  ares: "+process.versions.ares),this.log("  uv: "+process.versions.uv),this.log("  zlib: "+process.versions.zlib),this.log("  modules: "+process.versions.modules),this.log("  openssl: "+process.versions.openssl),console.log(""),this.log("details:"),this.log("  arch: "+process.arch),this.log("  platform: "+process.platform),this.log("  argv: "+process.argv),this.log("  env.PWD: "+process.env.PWD),this.log("  env.OLDPWD: "+process.env.OLDPWD),this.log("  env._: "+process.env._),this.log("  pid: "+process.pid),this.log("  features.debug: "+process.features.debug),this.log("  features.ipv6: "+process.features.ipv6),this.log("  version openssl: "+process.versions.openssl),console.log(""),process.kill()},Downpress.prototype.initHelp=function(){this.log("help is gonna be implemented in version 0.3, sorry",!0),process.kill()},Downpress.prototype.initRun=function(){var a=global.downpress.config["localhost-port"];console.log(),this.log("browse http://localhost:"+a+" for a build preview"),this.log("watching "+process.env.PWD),this.createTemplatesFolder(),this.watchLocalhost(),this.watchDirectories()},Downpress.prototype.initInit=function(){function a(a){a?(b.log("ERROR: folder "+a.path+"already does exist!",!0),process.kill()):9===++c&&b.whenAllInitFoldersAreCreated()}var b=this,c=0;this.fs.mkdir("./articles",a),this.fs.mkdir("./%templates",a),this.fs.mkdir("./%build",a),this.fs.mkdir("./page",a),this.fs.mkdir("./statics",a),this.fs.mkdir("./articles/1st",a),this.fs.mkdir("./articles/2nd",a),this.fs.mkdir("./articles/3rd",a),this.fs.mkdir("./articles/4th",a)},Downpress.prototype.whenAllInitFoldersAreCreated=function(){function a(a){a?(c.log("file already exists: "+a.path,!0),process.kill()):13===++b&&(c.log("success â€”- all files created successfully"),c.log("type `downpress run` and open browser"))}var b=0,c=this,d={},e="<!-- in this file use classic html -->\n{{ local._content }}",f="--\ntemplate : article\n---\n\n**hello, i am content of articles!**",g="--\ntemplate : index\n---\n\n**hello, i am in /index.md!**",h="--\ntemplate : page\n---\n\n**hello, i am in /page/index.md**",i="if you will not use '---' meta tags in MD,\nfile is copied only and not parsed",j="html { background: #ccc }",k="console.log('hello');",l="all content in this folder will be removed!! and replaced with build";d.index="\n	{{ local._content }}<br>\n",d.index+='\n	<script src="/statics/client.js"></script>\n',d.index+='\n	<link href="statics/stylesheet.css" rel="stylesheet" /><br>\n',d.index+='	<a href="/articles/1st/">1st blog</a><br/>\n',d.index+='	<a href="/articles/2nd/">2nd blog</a><br/>\n',d.index+='	<a href="/articles/3rd/">3rd blog</a><br/>\n',d.index+='	<a href="/articles/4th/">4th blog</a><br/>\n',d.index+='	<a href="/page/">page</a><br/>\n',this.fs.appendFile("./readme.md",i,a),this.fs.appendFile("./%templates/index.html",d.index,a),this.fs.appendFile("./%templates/page.html",e,a),this.fs.appendFile("./%templates/article.html",e,a),this.fs.appendFile("./%build/build-folder.md",l,a),this.fs.appendFile("./page/index.md",h,a),this.fs.appendFile("./articles/1st/index.md",f,a),this.fs.appendFile("./articles/2nd/index.md",f,a),this.fs.appendFile("./articles/3rd/index.md",f,a),this.fs.appendFile("./articles/4th/index.md",f,a),this.fs.appendFile("./statics/stylesheet.css",j,a),this.fs.appendFile("./statics/client.js",k,a),this.fs.appendFile("./index.md",g,a)},Downpress.prototype.initWithoutArgument=function(){this.log("ERROR -- use only subcommands: `run`, `init` or `report`",!0),this.log("downpress killed",!0),process.kill()},Downpress.prototype.createTemplatesFolder=function(){function a(){c.fs.mkdirSync(b),c.log(b+" folder created to the root of a website",!0)}var b="./"+global.downpress.config["dir-templates"],c=this;this.fs.exists(b,function(b){b||a()})},Downpress.prototype.watchLocalhost=function(){var a=require("connect"),b="./"+global.downpress.config["dir-build"],c=a().use(a.static(b)),d=require("http").createServer(c);d.listen(8088),d.on("error",function(a){this.portAlreadyExists(a)}.bind(this))},Downpress.prototype.portAlreadyExists=function(a){var b="EADDRINUSE"===a.code,c=global.downpress.config["localhost-port"];b?(this.log("ERROR: port "+c+" is already used by other process (maybe with downpress)",!0),this.log("maybe your have downpress already run somewhere (??)",!0),this.log("if you want to use more downpress ins. in one moment, change port in package.json",!0),console.log()):(this.log("TODO: this is unknown error of server creating",!0),this.log("please report this, so we can handle this error",!0),console.log(a)),process.kill()},Downpress.prototype.chokidarOptions=function(){return{ignored:global.downpress.config["watch-ignored"],persistent:!1,interval:global.downpress.config["watch-interval"],binaryInterval:global.downpress.config["watch-interval-binaries"],ignoreInitial:!0}},Downpress.prototype.watchDirectories=function(){var a=this.chokidarOptions(),b=this;global.downpress.isGenerating=!1,global.downpress.isInitial=!0,require("./Plugins")(),require("chokidar").watch(".",a).on("all",function(a,c){b.onWatchingChangeChoikar(a,c)})},Downpress.prototype.onWatchingChangeChoikar=function(a,b){var c=this;global.downpress.lastChanged={event:a,path:b},global.downpress.isGenerating||(c.log("`"+a+"` in `"+b+"`"),require("./Plugins")())},Downpress.prototype.packageJsonParsing=function(){var a="./package.json",b=this;this.fs.readFile(a,function(a,c){var d=JSON.parse(c);a&&b.errorOnPackageJsonRead(a),b.successOnPackageJsonRead(d)}),global.downpress={}},Downpress.prototype.successOnPackageJsonRead=function(a){var b=a.downpress;b||this.errorOnMissingDownpressInPackage(),global.downpress.package=a,global.downpress.config=a.downpress,global.downpress.config["localhost-port"]=a.downpress["localhost-port"]||"8088",global.downpress.config["localhost-port"]+="",global.downpress.config["dir-templates"]=a.downpress["dir-templates"]||"%templates",global.downpress.config["dir-build"]=a.downpress["dir-build"]||"%build",global.downpress.config["watch-interval"]=a.downpress["watch-interval"]||"50",global.downpress.config["watch-interval"]+="",global.downpress.config["watch-interval-binaries"]=a.downpress["watch-interval-binaries"]||"300",global.downpress.config["watch-interval-binaries"]+="",global.downpress.config["markdown-delimiter"]=a.downpress["markdown-delimiter"]||"---",global.downpress.config["watch-ignored"]=/%build/,this.emit("package-parsed")},Downpress.prototype.errorOnPackageJsonRead=function(a){var b=a.code="ENOENT";b&&(this.log("= ERROR",!0),this.log("REASON: file package.json doesn't exists in project",!0),this.log("SOLUTION: create file package.json in your root",!0),process.kill())},Downpress.prototype.errorOnMissingDownpressInPackage=function(){this.log("= ERROR",!0),this.log("REASON: file package.json has no object downpress",!0),this.log("SOLUTION: create in package.json 'downpress : {}' object",!0),process.kill()},new Downpress;